{"version":3,"sources":["interface/socket-data.interface.ts","hooks/useWebsocket.ts","components/HeroSection.tsx","components/StockTable.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StockStatus","useWebsocket","url","isPaused","useState","data","setData","ws","useRef","stockMap","console","log","useEffect","current","WebSocket","onopen","onclose","close","onmessage","e","updatedMessages","JSON","parse","map","tuple","stockName","stockPrice","previousPrice","updatedStock","Date","NEUTRAL","DOWN","UP","unionby","HeroSection","setPaused","className","type","onClick","paused","src","alt","tableHeadings","StockTable","heading","key","flipKey","element","spring","stock","flipId","round","fill","strokeLinecap","strokeLinejoin","strokeWidth","viewBox","stroke","d","formatDistanceToNow","addSuffix","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f8fcc518.chunk.js","sourcesContent":["export type StockTuple = [string, number];\nexport enum StockStatus {\n  NEUTRAL = \"neutral\",\n  UP = \"up\",\n  DOWN = \"down\",\n}\nexport type UpdatedStockTuple = [string, number, Date, StockStatus];\n","import { useRef, useEffect, useState } from \"react\";\nimport unionby from \"lodash.unionby\";\nimport {\n  UpdatedStockTuple,\n  StockStatus,\n  StockTuple,\n} from \"../interface/socket-data.interface\";\n\nconst useWebsocket = (url: string, isPaused: boolean) => {\n  const [data, setData] = useState<UpdatedStockTuple[]>([]);\n  const ws = useRef<WebSocket | null>(null);\n  const stockMap = useRef<{ [key: string]: number }>({});\n  console.log(stockMap);\n\n  useEffect(() => {\n    ws.current = new WebSocket(url);\n    ws.current.onopen = () => console.log(\"ws opened\");\n    ws.current.onclose = () => console.log(\"ws closed\");\n\n    return () => {\n      ws.current!.close();\n    };\n  }, [url]);\n\n  useEffect(() => {\n    if (!ws.current) return;\n    ws.current.onmessage = (e: MessageEvent) => {\n      if (isPaused) return;\n      const message = JSON.parse(e.data) as StockTuple[];\n      const updatedMessages = message.map((tuple: StockTuple) => {\n        const [stockName, stockPrice] = tuple;\n        const previousPrice = stockMap.current[stockName];\n\n        stockMap.current[stockName] = stockPrice;\n        const updatedStock: UpdatedStockTuple = [\n          stockName,\n          stockPrice,\n          new Date(),\n          StockStatus.NEUTRAL,\n        ];\n        if (previousPrice) {\n          updatedStock[3] =\n            previousPrice >= stockPrice ? StockStatus.DOWN : StockStatus.UP;\n        }\n\n        return updatedStock;\n      });\n\n      setData((data): UpdatedStockTuple[] => {\n        return unionby(updatedMessages, data, (tuple) => tuple[0]);\n      });\n    };\n  }, [isPaused]);\n\n  return data;\n};\n\nexport default useWebsocket;\n","import React from \"react\";\n\ninterface IProps {\n  isPaused: boolean;\n  setPaused: (paused: any) => void;\n}\n\nconst HeroSection: React.FC<IProps> = ({ isPaused, setPaused }) => (\n  <main className=\"lg:relative w-full\">\n    <div className=\" lg:py-48 lg:text-left hero-left-container max-w-7xl\">\n      <div className=\"px-4 lg:w-1/2 sm:px-8 xl:pr-16\">\n        <h2 className=\"hero-heading-text sm:text-5xl sm:leading-none md:text-6xl lg:text-5xl xl:text-6xl\">\n          It is stonks time\n          <br className=\"xl:hidden\" />\n          <span className=\"text-indigo-600\"> brothers and sisters</span>\n        </h2>\n        <p className=\"hero-subtitle-text sm:text-xl md:mt-5 md:max-w-3xl\">\n          A cool corporate image of a fictional place to lure you into thinking\n          this is going to be useful\n        </p>\n        <div className=\"mt-10 sm:flex sm:justify-center lg:justify-start\">\n          <div className=\"rounded-md shadow\">\n            <button\n              type=\"button\"\n              onClick={() => setPaused((paused: boolean) => !paused)}\n              className=\"w-full flex items-center justify-center px-8 py-3 border border-transparent text-base leading-6 font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-500 focus:outline-none focus:border-indigo-700 focus:shadow-outline-indigo transition duration-150 ease-in-out md:py-4 md:text-lg md:px-10\"\n            >\n              {isPaused\n                ? \"Reignite the wolf of fall street\"\n                : \"Stop the stonks\"}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div className=\"hero-image-container lg:absolute lg:inset-y-0 lg:right-0 lg:w-1/2 lg:h-full sm:h-72 md:h-96\">\n      <img\n        className=\"hero-image\"\n        src=\"https://images.unsplash.com/photo-1468254095679-bbcba94a7066?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1349&q=80\"\n        alt=\"Stonks\"\n      />\n    </div>\n  </main>\n);\n\nexport default HeroSection;\n","import React from \"react\";\nimport { Flipper, Flipped } from \"react-flip-toolkit\";\nimport round from \"lodash.round\";\n//@ts-ignore\nimport { Table, Thead, Tr, Td, Th } from \"react-super-responsive-table\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport \"react-super-responsive-table/dist/SuperResponsiveTableStyle.css\";\nimport {\n  UpdatedStockTuple,\n  StockStatus,\n} from \"../interface/socket-data.interface\";\n\ninterface IProps {\n  data: UpdatedStockTuple[];\n}\nconst tableHeadings = [\"Stock\", \"Price\", \"Last updated at\"];\n\nconst StockTable: React.FC<IProps> = ({ data }) => (\n  <div className=\"table-container\">\n    <div className=\"sm:rounded-lg\">\n      <Table className=\"min-w-full divide-y divide-gray-200\">\n        <Thead>\n          <Tr>\n            {tableHeadings.map((heading) => (\n              <Th\n                key={heading}\n                className=\"px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider\"\n              >\n                {heading}\n              </Th>\n            ))}\n          </Tr>\n        </Thead>\n        <Flipper\n          flipKey={data}\n          element=\"tbody\"\n          spring=\"veryGentle\"\n          className=\"bg-white divide-y divide-gray-200\"\n        >\n          {data.map((stock: UpdatedStockTuple) => {\n            return (\n              <Flipped key={stock[0]} flipId={stock[0]}>\n                <Tr\n                  className={`${stock[3] === \"up\" ? \"bg-green-200\" : \"\"} ${\n                    stock[3] === \"down\" ? \"bg-red-200\" : \"\"\n                  }`}\n                >\n                  <Td className=\"px-6 py-4 whitespace-no-wrap text-sm leading-5 font-medium text-gray-900 uppercase\">\n                    {stock[0]}\n                  </Td>\n                  <Td className=\"px-6 py-4 whitespace-no-wrap text-sm leading-5 text-gray-700\">\n                    <span className=\"stock-price\">{round(stock[1], 2)}</span>\n                    {stock[3] === StockStatus.UP && (\n                      <svg\n                        className=\"table-row-icon\"\n                        fill=\"none\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth=\"2\"\n                        viewBox=\"0 0 24 24\"\n                        stroke=\"#22543d\"\n                      >\n                        <path d=\"M5 10l7-7m0 0l7 7m-7-7v18\"></path>\n                      </svg>\n                    )}\n                    {stock[3] === StockStatus.DOWN && (\n                      <svg\n                        fill=\"none\"\n                        className=\"table-row-icon\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth=\"2\"\n                        viewBox=\"0 0 24 24\"\n                        stroke=\"#742a2a\"\n                      >\n                        <path d=\"M19 14l-7 7m0 0l-7-7m7 7V3\"></path>\n                      </svg>\n                    )}\n                  </Td>\n                  <Td className=\"px-6 py-4 whitespace-no-wrap text-sm leading-5 text-gray-700\">\n                    {formatDistanceToNow(stock[2], { addSuffix: true })}\n                  </Td>\n                </Tr>\n              </Flipped>\n            );\n          })}\n        </Flipper>\n      </Table>\n    </div>\n  </div>\n);\n\nexport default StockTable;\n","import React, { useState } from \"react\";\n\nimport useWebsocket from \"./hooks/useWebsocket\";\nimport HeroSection from \"./components/HeroSection\";\nimport StockTable from \"./components/StockTable\";\n\nfunction App() {\n  const [isPaused, setPaused] = useState(false);\n  const data = useWebsocket(\"ws://stocks.mnet.website/\", isPaused);\n  return (\n    <div className=\"relative bg-gray-50\">\n      <HeroSection setPaused={setPaused} isPaused={isPaused} />\n      <StockTable data={data} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}